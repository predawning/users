"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 2.0.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import raven

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '=jjmbohsl1_2x+hfp1bl$3)a=brf1a&1q+snc24r=^=dk@nq0v'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # plugin app here
    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'django_filters',
    'users.apps.UsersConfig',

    'raven.contrib.django.raven_compat',

    'health_check',
    'health_check.db',
    'health_check.cache',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases

# please override this setting in your local_settings.py
DATABASES = NotImplemented

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'zh-Hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

# disable raven by default, please enable it in local_settings.py if need
RAVEN_CONFIG = {
    'release': raven.fetch_git_sha(BASE_DIR),
}

from django.utils.log import DEFAULT_LOGGING
LOG_ROOT = "/tmp"
_console_level = 'DEBUG'
_log_filename = 'dev.log'
_slow_warn = 0.5
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'queries_above_warn': {
            '()': 'django.utils.log.CallbackFilter',
            'callback': lambda record: record.duration > _slow_warn  # output slow queries only
        },
    },
    'formatters': {
        'verbose': {
            'format': '%(asctime)s %(name)-20s %(funcName)s %(lineno)d:'
                      '%(levelname)-8s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': _console_level,
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(LOG_ROOT, _log_filename),
            'formatter': 'verbose',
        },
        'sentry': {
            'level': 'ERROR',  # To capture more than ERROR, change to WARNING, INFO, etc.
            'class': 'raven.contrib.django.raven_compat.handlers.SentryHandler',
            'tags': {'custom-tag': 'x'},
        },
    },
    'loggers': {
        '': {
            'level': 'WARNING',
            'handlers': ['file', 'console', 'sentry'],
            'propagate': False,
        },
        'project': {
            'level': 'DEBUG',
            'handlers': ['file', 'console', 'sentry'],
            'propagate': False,
        },
        'celery.task': {
            'level': 'DEBUG',
            'handlers': ['file', 'console'],
            'propagate': False,
        },
        'django.server': {
            'level': 'INFO',
            'handlers': ['file', 'console', 'sentry'],
            'propagate': False,
        },
        'django.db.backends': {
            'level': 'INFO',
            'handlers': ['console', 'file'],
            'propagate': False,
            'filters': ['queries_above_warn'],
        },
        'raven': {
            'level': 'NOTSET',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    }
}

AUTH_USER_MODEL = 'users.User'

# SMS gateway
LUOSIMAO_URL = 'https://sms-api.luosimao.com/v1/'
LUOSIMAO_API_KEY = ''

ALIYUN_ACCESS_KEY_ID = ""
ALIYUN_ACCESS_KEY_SECRET = ""

# please enable luosimao when need sms gateway
# SMS_BACKEND = 'sms.backends.luosimao.LuosimaoSMSBackend'
# otherwise we use a dummy client
SMS_BACKEND = 'sms.backends.dummy.DummySMSBackend'

TOTAL_COLLECTION_NUMBERS = 10

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # default is True, set it False to avoid of convert decimal to string
    'COERCE_DECIMAL_TO_STRING': False,
}

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'api_key': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header',
        },
    },
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    'JSON_EDITOR': True,
    'SHOW_REQUEST_HEADERS': True,
}

# Try to load local settings from project/local_settings.py
# We check for file existence, instead of trying to import it and
# catch an ImportError, since that can get really messy if an import inside
# the local settings goes wrong.
# WARNING: If you set something in local_settings.py, make sure that all
# variables that are based on it are also overridden!
_LOCAL_SETTINGS_PATH = os.path.join(
    os.path.dirname(__file__), 'local_settings.py')
if os.path.exists(_LOCAL_SETTINGS_PATH):
    exec(open(_LOCAL_SETTINGS_PATH).read())
